--[[

    Interpreter (Shunting Yard Algorithm)

    The interpreter will step through
    the postfix generated by the SY parser
    and evaluate it.

]]

local Interpreter = {}

local Token = require(script.Parent.Token)
local Stack = require(script.Parent.Stack)

local UNARY = {
	Token.Type.UMINUS,
	Token.Type.ID
}

--[[
	Utility function for
	determining if a
	token is for a
	unary operation
]]
local function isUnaryOp(token)
	return table.find(UNARY, token.type) and true or false
end

--[[
	Evaluate postfix
]]
function Interpreter.evaluate(postfix)
	local stack = Stack.new()
	
	for index, token in ipairs(postfix:get()) do
		if (typeof(token) == 'number') then
			stack:push(token)
		else
			local val1, val2 = nil, stack:pop()
			if (not isUnaryOp(token)) then
				val1 = stack:pop()
			end
			
			if (token.type == Token.Type.PLUS) then
				stack:push(val1 + val2)
			elseif (token.type == Token.Type.MINUS) then
				stack:push(val1 - val2)
			elseif (token.type == Token.Type.ASTERIK) then
				stack:push(val1 * val2)
			elseif (token.type == Token.Type.SLASH) then
				stack:push(val1 / val2)
			elseif (token.type == Token.Type.CARET) then
				stack:push(val1 ^ val2)
			elseif (token.type == Token.Type.UMINUS) then
				stack:push(-val2)
			elseif (token.type == Token.Type.ID) then
				if (token.value == Token.Value.SQRT) then
					stack:push(math.sqrt(val2))
				elseif (token.value == Token.Value.SIN) then
					stack:push(math.sin(val2))
				elseif (token.value == Token.Value.COS) then
					stack:push(math.cos(val2))
				elseif (token.value == Token.Value.TAN) then
					stack:push(math.tan(val2))
				elseif (token.value == Token.Value.ASIN) then
					stack:push(math.asin(val2))
				elseif (token.value == Token.Value.ACOS) then
					stack:push(math.acos(val2))
				elseif (token.value == Token.Value.ATAN) then
					stack:push(math.atan(val2))
				elseif (token.value == Token.Value.ABS) then
					stack:push(math.abs(val2))
				end
			else
				error('Unknown token if you are seeing this error please report it!')
			end
		end
	end
	
	return tonumber(stack:top())
end

return Interpreter